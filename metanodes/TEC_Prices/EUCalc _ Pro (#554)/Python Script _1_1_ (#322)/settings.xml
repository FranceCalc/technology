<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import pandas as pd%%00010import numpy as np%%00010%%00010# Copy input to output%%00010output_table = input_table.copy()%%00010%%00010# Parameters%%00010begin_year=int(flow_variables['baseyear'])%%00010last_year=2050%%00010x0 = 0%%00010Sc = 0.999%%00010eps = 1-Sc%%00010mu = 0.5%%00010beta = (mu-1)/np.log(1/Sc-1)%%00010%%00010#(1) Compute 2050 objectives for each country%%00010input_table['conv_2050']=input_table['EU_2050']%%00010input_table['comp_2050']=(input_table['EU_2050']/input_table['EU_2015'])*input_table[flow_variables['baseyear']]%%00010input_table['objective_2050']=input_table['convergence']*input_table['conv_2050']+(1-input_table['convergence'])*input_table['comp_2050']%%00010%%00010%%00010#(2) Interpolate between 2015 &amp; 2050%%00010for year in range(begin_year+1,last_year+1):%%00010 input_table[str(year)]=np.nan#input_table[str(year-1)]+(input_table['objective_2050']-input_table['2015'])/(end-begin)%%00010%%00010for index, row in input_table.iterrows():%%00010 for year in range(begin_year+1,last_year+1):%%00010  if year &lt;= input_table.loc[index,'start-year'] : %%00010   value = input_table.loc[index,str(year-1)] #TODO : replace by Business as Usual ? (user choice)%%00010  else: %%00010   end_value = input_table.loc[index,'objective_2050']%%00010   start_value = input_table.loc[index,'2015']%%00010   A = end_value-start_value%%00010   end_year = input_table.loc[index,'end-year']%%00010   start_year = input_table.loc[index,'start-year']%%00010   previous_value = input_table.loc[index,str(year-1)]%%00010   if input_table.loc[index,'curve-type'] == 'linear':%%00010    if  year &gt; input_table.loc[index,'end-year'] :%%00010   %%00009 value = input_table.loc[index,str(year-1)]%%00010    else :%%00010     value = previous_value+A/(end_year-start_year)%%00010   elif input_table.loc[index,'curve-type'] == 's-curve':%%00010    x = (year - start_year)/(end_year - start_year)%%00010    value = A*(np.power(np.exp(-(x-mu)/beta)+1,-1)-np.power(np.exp(-(x0-mu)/beta)+1,-1))+start_value%%00010  %%00010  input_table.at[index,str(year)]=value%%00010%%00010%%00010output_table = input_table.copy()"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Projections to 2050"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="1427"/>
<entry key="y-coordinate" type="xint" value="299"/>
<entry key="width" type="xint" value="106"/>
<entry key="height" type="xint" value="15"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="CONFIGURED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script.Python2ScriptNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
